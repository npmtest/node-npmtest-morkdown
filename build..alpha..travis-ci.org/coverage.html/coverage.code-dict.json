{"/home/travis/build/npmtest/node-npmtest-morkdown/test.js":"/* istanbul instrument in package npmtest_morkdown */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-morkdown/lib.npmtest_morkdown.js":"/* istanbul instrument in package npmtest_morkdown */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_morkdown = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_morkdown = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-morkdown/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-morkdown && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_morkdown */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_morkdown\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_morkdown.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_morkdown.rollup.js'] =\n            local.assetsDict['/assets.npmtest_morkdown.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_morkdown.__dirname + '/lib.npmtest_morkdown.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-morkdown/node_modules/morkdown/lib/server.js":"var path       = require('path')\n  , http       = require('http')\n  , st         = require('st')\n  , browserify = require('browserify')\n  , fs         = require('fs')\n  , brucedown  = require('brucedown')\n  , after      = require('after')\n  , bl         = require('bl')\n  , he        = require('he')\n  , shoe       = require('shoe')\n\n  , staticPath = path.join(__dirname, '../static')\n\nfunction writeHead (res, contentType) {\n  res.writeHead(200, {\n      'Content-Type': contentType\n    , 'Cache-Control': 'no-cache'\n  })\n}\n\n// constructor\nfunction Morkdown (file, theme, watching) {\n  if (!(this instanceof Morkdown)) return new Morkdown(file, theme, watching)\n\n  // file we're editing\n  this.file  = file\n  this.theme = theme || 'neat'\n\n  // static resources\n  this.morkdownStatic = st({\n      path  : staticPath\n    , url   : '/'\n    , cache : false\n    , dot   : true\n    , passthrough : true\n  })\n\n  // static resources\n  this.projectStatic = st({\n      path  : path.dirname(path.resolve(file))\n    , url   : '/'\n    , cache : false\n    , dot   : true\n    , passthrough : false\n  })\n\n  // hide input and expand output if we are watching changes to file\n  this.watching = watching\n  this.inputStyle = this.watching ? 'style=\"display: none;\"' : ''\n  this.outputStyle = this.watching ? 'style=\"left: 0%\"' : ''\n\n  this.server = http.createServer(function (req, res) {\n    // first try to handle it locally, then handler() will defer to st if needed\n    this.handler(req, res)\n  }.bind(this))\n}\n\n// exportable\nMorkdown.prototype.listen = function () {\n  var sock\n\n  this.server.listen.apply(this.server, arguments)\n\n  if (!this.watching)\n    return\n\n  sock = shoe(function (stream) {\n    var opts = { persistent: true, interval: 100 }\n    fs.watchFile(this.file, opts, function () {\n      fs.readFile(this.file, function (err, data) {\n        brucedown(data, function (err, content) {\n          stream.write(JSON.stringify({ content: content }))\n        })\n      })\n    }.bind(this))\n\n    stream.on('end', function () {\n      fs.unwatchFile(this.file)\n    }.bind(this))\n\n  }.bind(this))\n\n  sock.install(this.server, '/output')\n}\n\n// handle /bundle.js requests\nMorkdown.prototype.handle_bundle_js = function(req, res) {\n  writeHead(res, 'text/javascript')\n  browserify(path.join(__dirname, '../browser/index.js'))\n    .bundle()\n    .pipe(res)\n}\n\n// handle / & /index.html requests\nMorkdown.prototype.handle_ =\nMorkdown.prototype.handle_index_html = function (req, res) {\n  // read index.html, read file, render file as markdown\n  // replace {input} and {output} in index.html with our\n  // content, serve to the client\n  var index, input, output\n\n    , done = after(2, function (err) {\n        if (err) {\n          writeHead(res, 'application/json')\n          return res.end(JSON.stringify({ error: err }))\n        }\n\n        // replace order matters here since {output} appears last in the file, we don't\n        // want to replace \"{output}\" if it happens to exist in the input\n        index = index\n          .replace('{theme}', this.theme)\n          .replace('{output}', output)\n          .replace('{input}', input)\n          .replace('{file}', this.file)\n          .replace('{input-style}', this.inputStyle)\n          .replace('{output-style}', this.outputStyle)\n\n        writeHead(res, 'text/html')\n        res.end(index)\n      }.bind(this))\n\n  fs.readFile(path.join(staticPath, 'index.html'), 'utf8', function (err, _index) {\n    index = _index\n    done(err)\n  })\n\n  fs.readFile(this.file, 'utf8', function (err, _input) {\n    if (err)\n      return done(err)\n\n    brucedown(_input ,function (err, _output) {\n      if (err)\n        return done(err)\n\n      input = he.encode(_input)\n      output = _output\n      done()\n    })\n  })\n}\n\n// handle /content calls (assume it's a post that we can collect from)\nMorkdown.prototype.handle_content = function (req, res) {\n  req.pipe(bl(function (err, body) {\n    if (err)\n      return console.error(err) // whaaa??\n\n    // write file (save) and render markdown & return\n\n    var content, done\n\n    body = JSON.parse(body.toString())\n\n    // out of time request, ignore it\n    if (this.lastTransmission && body.ts < this.lastTransmission) {\n      writeHead(res, 'text/plain')\n      return res.end('stale')\n    }\n\n    done = after(2, function (err) {\n      var responseBody = {}\n      if (err) {\n        responseBody.error = err.message || err\n        console.error(err.stack)\n      } else {\n        responseBody.content = content\n      }\n\n      writeHead(res, 'application/json')\n      res.end(JSON.stringify(responseBody))\n    })\n\n    fs.writeFile(this.file, body.content, done)\n\n    brucedown(body.content, function (err, _content) {\n      content = _content\n      done(err)\n    })\n  }.bind(this)))\n}\n\n// basic router that maps urls to this.handle_X function calls where\n// X is the name of the request stripped of non-alphabetic characters\n// and . replaced with _\nMorkdown.prototype.handler = function(req, res) {\n  var fn = 'handle_' + String(req.url)\n      .toLowerCase()\n      .replace(/[^a-z\\.]/g, '')\n      .replace(/\\./g, '_')\n\n  if (typeof this[fn] == 'function')\n    return this[fn](req, res)\n\n  // no match, defer to st mount point which will do 404 if required\n  this.morkdownStatic(req, res, function () {\n    this.projectStatic(req, res)\n  }.bind(this))\n}\n\nmodule.exports = Morkdown\n","/home/travis/build/npmtest/node-npmtest-morkdown/node_modules/morkdown/bin/morkdown.js":"#!/usr/bin/env node\n\nvar me     = require('..')\n  , spawn  = require('child_process').spawn\n  , os     = require('os')\n  , fs     = require('fs')\n  , path   = require('path')\n  , argv = (function () {\n      var argv = require('optimist').argv\n        , def, p\n      try {\n        def = JSON.parse(fs.readFileSync(path.join(process.env.HOME, '.morkdownrc')))\n        for (p in argv)\n          def[p] = argv[p]\n        argv = def\n      } catch (e) {}\n      return argv\n    }())\n  , watching = argv.w\n  , file   = watching ? argv.w : argv._[0]\n  , theme  = argv.theme\n\n  , bin    = 'google-chrome'\n  , darwinBin = [\n        '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'\n      , '/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary'\n      , '/opt/homebrew-cask/Caskroom/google-chrome/stable-channel/Google Chrome.app/Contents/MacOS/Google Chrome'\n      , '/opt/homebrew-cask/Caskroom/google-chrome/latest/Google Chrome.app/Contents/MacOS/Google Chrome'\n    ]\n  , linuxBin = [\n        '/usr/bin/google-chrome'\n      , '/usr/bin/chromium-browser'\n      , '/usr/bin/chromium'\n    ]\n  , args   = [\n        null\n      , '--disk-cache-size 0'\n      , '--no-proxy-server'\n    ]\n\nif (file && fs.existsSync(file) && !fs.statSync(file).isFile()) {\n  console.error('File [' + file + '] is not a regular file')\n  file = null\n}\n\nif (file && !fs.existsSync(file))\n  fs.writeFileSync(file, '', 'utf8')\n\nif (!file) {\n  console.error('Usage: morkdown <path to file.md>')\n  process.exit(-1)\n}\n\nif (os.platform() == 'darwin') {\n  bin = darwinBin.reduce(function (p, c) {\n    if (p)\n      return p\n    return fs.existsSync(c) && c\n  }, null)\n\n  if (!bin)\n    throw(new Error('Chrome or Canary were not found'))\n}\n\nif (os.platform() == 'linux') {\n  bin = linuxBin.reduce(function (p, c) {\n    if (p)\n      return p\n    return fs.existsSync(c) && c\n  }, null)\n\n  if (!bin)\n    throw(new Error('Chrome or Chromium were not found'))\n}\n\nme(file, theme, watching).listen(0, 'localhost', function (err) {\n  if (err)\n    throw err\n\n  // put the address on the end of the first argument, the URL\n  args[0] = '--app=http://' + this.address().address + ':' + String(this.address().port)\n\n  if (process.env.HOME)\n    args.push('--user-data-dir=' + path.join(process.env.HOME, '.md'))\n\n  spawn(bin, args)\n    .on('exit', process.exit.bind(process, 0))\n    .stderr.pipe(process.stderr)\n})\n","/home/travis/build/npmtest/node-npmtest-morkdown/node_modules/morkdown/browser/codemirror.js":"global.CodeMirror = require('codemirror') && window.CodeMirror\nrequire('codemirror/addon/mode/overlay')\nrequire('codemirror/addon/dialog/dialog')\nrequire('codemirror/addon/search/searchcursor')\nrequire('codemirror/addon/search/search')\nrequire('codemirror/addon/search/match-highlighter')\nrequire('codemirror/addon/edit/closebrackets')\nrequire('codemirror/addon/edit/matchbrackets')\nrequire('codemirror/addon/edit/continuelist')\nrequire('codemirror/addon/edit/closetag')\n\nrequire('codemirror/mode/yaml/yaml')\nrequire('codemirror/mode/commonlisp/commonlisp')\nrequire('codemirror/mode/turtle/turtle')\nrequire('codemirror/mode/d/d')\nrequire('codemirror/mode/ruby/ruby')\nrequire('codemirror/mode/ocaml/ocaml')\nrequire('codemirror/mode/coffeescript/coffeescript')\nrequire('codemirror/mode/z80/z80')\nrequire('codemirror/mode/gfm/gfm')\nrequire('codemirror/mode/pig/pig')\nrequire('codemirror/mode/smalltalk/smalltalk')\nrequire('codemirror/mode/lua/lua')\nrequire('codemirror/mode/rst/rst')\nrequire('codemirror/mode/haskell/haskell')\nrequire('codemirror/mode/python/python')\nrequire('codemirror/mode/xquery/xquery')\nrequire('codemirror/mode/erlang/erlang')\nrequire('codemirror/mode/mirc/mirc')\nrequire('codemirror/mode/q/q')\nrequire('codemirror/mode/velocity/velocity')\nrequire('codemirror/mode/jinja2/jinja2')\nrequire('codemirror/mode/sieve/sieve')\nrequire('codemirror/mode/perl/perl')\nrequire('codemirror/mode/htmlembedded/htmlembedded')\nrequire('codemirror/mode/stex/stex')\nrequire('codemirror/mode/rpm/changes/changes')\nrequire('codemirror/mode/rpm/spec/spec')\nrequire('codemirror/mode/http/http')\nrequire('codemirror/mode/tiki/tiki')\nrequire('codemirror/mode/clike/clike')\nrequire('codemirror/mode/scheme/scheme')\nrequire('codemirror/mode/vb/vb')\nrequire('codemirror/mode/sparql/sparql')\nrequire('codemirror/mode/sql/sql')\nrequire('codemirror/mode/livescript/livescript')\nrequire('codemirror/mode/sass/sass')\nrequire('codemirror/mode/ntriples/ntriples')\nrequire('codemirror/mode/markdown/markdown')\nrequire('codemirror/mode/ecl/ecl')\nrequire('codemirror/mode/tiddlywiki/tiddlywiki')\nrequire('codemirror/mode/clojure/clojure')\nrequire('codemirror/mode/properties/properties')\nrequire('codemirror/mode/shell/shell')\nrequire('codemirror/mode/haml/haml')\nrequire('codemirror/mode/groovy/groovy')\nrequire('codemirror/mode/meta')\nrequire('codemirror/mode/vbscript/vbscript')\nrequire('codemirror/mode/rust/rust')\nrequire('codemirror/mode/diff/diff')\nrequire('codemirror/mode/r/r')\nrequire('codemirror/mode/pascal/pascal')\nrequire('codemirror/mode/less/less')\nrequire('codemirror/mode/cobol/cobol')\nrequire('codemirror/mode/tcl/tcl')\nrequire('codemirror/mode/gas/gas')\nrequire('codemirror/mode/go/go')\nrequire('codemirror/mode/xml/xml')\nrequire('codemirror/mode/verilog/verilog')\nrequire('codemirror/mode/css/css')\nrequire('codemirror/mode/apl/apl')\nrequire('codemirror/mode/php/php')\nrequire('codemirror/mode/javascript/javascript')\nrequire('codemirror/mode/smarty/smarty')\nrequire('codemirror/mode/htmlmixed/htmlmixed')\nrequire('codemirror/mode/asterisk/asterisk')\nrequire('codemirror/mode/haxe/haxe')"}